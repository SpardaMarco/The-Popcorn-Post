openapi: 3.0.0

info:
 version: '1.0'
 title: 'LBAW The Popcorn Post Web API'
 description: 'Web Resources Specification (A7) for The Popcorn Post '

servers:
- url: http://lbaw2356.lbaw.fe.up.pt
  description: Production server

tags:
 - name: 'M01: Authentication and Individual Profile'
 - name: 'M02: Content Items'
 - name: 'M03: Votes and Tags'
 - name: 'M04: Topics'
 - name: 'M05: Members'
 - name: 'M06: Notifications'
 - name: 'M07: Search'
 - name: 'M08: Member Administration and Static Pages'

paths:
 /login:
   get:
     operationId: R101
     summary: 'R101: Login Form'
     description: 'Provide login form. Access: PUB'
     tags:
       - 'M01: Authentication and Individual Profile'
     responses:
       '200':
         description: 'Success. Display Log-in Form (UI06)'
   post:
     operationId: R102
     summary: 'R102: Login Authentication'
     description: 'Processes the login form submission. Access: PUB'
     tags:
       - 'M01: Authentication and Individual Profile'

     requestBody:
       required: true
       content:
         application/x-www-form-urlencoded:
           schema:
             type: object
             properties:
               email:          # <!--- form field name 
                 type: string
               password:    # <!--- form field name
                 type: string
             required:
                  - email
                  - password

     responses:
       '302':
         description: 'Redirect after processing the login credentials.'
         headers:
           Location:
             schema:
               type: string
             examples:
               302Success:
                 description: 'Successful authentication. Redirect to home page.'
                 value: '/home'
               302Error:
                 description: 'Failed authentication. Redirect to login form.'
                 value: '/login'
 /logout:
   get:
     operationId: R103
     summary: 'R103: Logout Action'
     description: 'Logout the current authenticated member. Access: MEM, ADM'
     tags:
       - 'M01: Authentication and Individual Profile'
     responses:
       '302':
         description: 'Redirect after processing logout.'
         headers:
           Location:
             schema:
               type: string
             examples:
               302Success:
                 description: 'Successful logout. Redirect to login form.'
                 value: '/login'
 /register:
   get:
     operationId: R104
     summary: 'R104: Register Form'
     description: 'Provide new user registration form. Access: PUB'
     tags:
       - 'M01: Authentication and Individual Profile'
     responses:
       '200':
         description: 'Ok. Show Sign-Up UI (UI07)'

   post:
     operationId: R105
     summary: 'R105: Register Action'
     description: 'Processes the new user registration form submission. Access: PUB'
     tags:
       - 'M01: Authentication and Individual Profile'

     requestBody:
       required: true
       content:
         application/x-www-form-urlencoded:
           schema:
             type: object
             properties:
               firstName:
                 type: string
               lastName:
                 type: string
               username:
                 type: string
               email:
                 type: string
               password:
                 type: string
               confirmPassword:
                 type: string
             required:
                  - firstName
                  - lastName
                  - username
                  - email
                  - password
                  - confirmPassword

     responses:
       '302':
         description: 'Redirect after processing the new user information.'
         headers:
           Location:
             schema:
               type: string
             examples:
               302Success:
                 description: 'Successful authentication. Redirect to user profile.'
                 value: '/members/{username}'
               302Failure:
                 description: 'Failed authentication. Redirect to register form.'
                 value: '/register'

 /members/{username}:
   get:
     operationId: R106
     summary: 'R106: View user profile'
     description: 'Show user profile. Access: MEM, ADM'
     tags:
       - 'M01: Authentication and Individual Profile'
       - 'M05: Members'
       - 'M08: Member Administration and Static Pages'

     parameters:
       - in: path
         name: username
         schema:
           type: string
         required: true

     responses:
       '200':
         description: 'Ok. Show User Profile UI (UI09)'
       '403':
         description: 'Forbidden. User is not allowed to view this profile.'
       '404':
          description: 'Not Found. User does not exist.'
   patch:
      operationId: R107
      summary: 'R107: Edit user profile action'
      description: 'Processes the user profile edit form submission. Access: OWN, ADM'
      tags:
        - 'M01: Authentication and Individual Profile'
        - 'M08: Member Administration and Static Pages'
      
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
  
      requestBody:
         required: true
         content:
           application/x-www-form-urlencoded:
             schema:
               type: object
               properties:
                 biography:
                   type: string
                 picture:
                   type: string
                   format: binary
               required:
                 - biography
                 - picture
      
      responses:
         '302':
           description: 'Redirect after processing the new user information.'
           headers:
             Location:
               schema:
                 type: string
               examples:
                 302Success:
                   description: 'Member profile updated. Redirect to user profile.'
                   value: '/members/{username}'
                 302Failure:
                   description: 'Member profile not updated. Redirect to user profile edit form.'
                   value: '/members/{username}/edit'
         '403':
           description: 'Forbidden. User is not allowed to edit this profile.'
         '404':
           description: 'Not Found. User does not exist.'
   delete:
    operationId: R108
    summary: 'R108: Delete member account action'
    description: 'Processes the delete account form submission. Access: OWN, ADM'
    tags:
       - 'M01: Authentication and Individual Profile'
       - 'M08: Member Administration and Static Pages'
    parameters:
       - in: path
         name: username
         schema:
           type: string
         required: true
    responses:
       '302':
         description: 'Member account deleted successfully.'
         headers:
           Location:
             schema:
               type: string
             examples:
               302Success:
                 description: 'Member account deleted successfully. Redirect to home page.'
                 value: '/home'
       '403':
         description: 'Forbidden. User is not allowed to view this page.'
       '404':
         description: 'Not Found. User does not exist.'

 /members/{username}/edit:
  get:
     operationId: R109
     summary: 'R109: Edit user profile'
     description: 'Show user profile edit form. Access: OWN, ADM'
     tags:
       - 'M01: Authentication and Individual Profile'
       - 'M08: Member Administration and Static Pages'
     responses:
       '200':
         description: 'Success. Display Log-in Form (UI10)'
       '403':
          description: 'Forbidden. User is not allowed to edit this profile.'
       '404':
          description: 'Not Found. User does not exist.'
  
 /members/{username}/settings:
  get:
     operationId: R110
     summary: 'R110: Member account settings'
     description: 'Show member account settings page. Access: OWN, ADM'
     tags:
        - 'M01: Authentication and Individual Profile'
        - 'M08: Member Administration and Static Pages'
     
     parameters:
       - in: path
         name: username
         schema:
           type: string
         required: true
     responses:
        '200':
          description: 'Success. Display Member Account Settings UI (UI08)'
        '403':
          description: 'Forbidden. User is not allowed to view this page.'
        '404':
          description: 'Not Found. User does not exist.'
  patch:
      operationId: R111
      summary: 'R111: Edit member account settings action'
      description: 'Processes the member account settings form submission. Access: OWN, ADM'
      tags:
          - 'M01: Authentication and Individual Profile'
          - 'M08: Member Administration and Static Pages'
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      requestBody:
          required: true
          content:
            application/x-www-form-urlencoded:
              schema:
                type: object
                properties:
                  firstName:
                    type: string
                  lastName:
                    type: string
                  username:
                    type: string
                  email:
                    type: string
                  oldPassword:
                    type: string
                  newPassword:
                    type: string
                  confirmNewPassword:
                    type: string
      responses:
          '302':
            description: 'Redirect after processing the member account settings information.'
            headers:
              Location:
                schema:
                  type: string
                examples:
                  302Success:
                    description: 'Member account settings updated.'
                    value: '/members/{username}'
                  302Failure:
                    description: 'Member account settings not updated. Redirect to member account settings page.'
                    value: '/members/{username}/settings'
          '403':
            description: 'Forbidden. User is not allowed to view this page.'
          '404':
            description: 'Not Found. User does not exist.'

 /api/members/{username}/follow:
  post:
     operationId: R112
     summary: 'R112: Follow member action'
     description: 'Processes the follow member form submission. Access: OWN'
     tags:
          - 'M05: Members'
     parameters:
        - in: path
          name: username
          schema:
            type: string
          description: 'Member to follow'
          required: true
     responses:
        '302':
          description: 'Redirect after processing the follow member request.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Member followed successfully. Redirect to member profile.'
                  value: '/members/{username}'
                302Failure:
                  description: 'Member not followed. Redirect to member profile.'
                  value: '/members/{username}'
        '403':
          description: 'Forbidden. User is not allowed to view this page.'
        '404':
          description: 'Not Found. User does not exist.'

  delete:
     operationId: R113
     summary: 'R113: Unfollow member action'
     description: 'Processes the unfollow member form submission. Access: OWN'
     tags:
          - 'M05: Members'
     parameters:
        - in: path
          name: username
          schema:
            type: string
          description: 'Member to unfollow'
          required: true
     responses:
        '200':
          description: 'Member unfollowed successfully.'
        '403':
          description: 'Forbidden. User is not allowed to view this page.'
        '404':
          description: 'Not Found. User does not exist.'

 /api/members/{username}/content:
  get:
     operationId: R114
     summary: 'R114: Retrieve member content items (articles and comments)'
     description: 'Retrieve member content items (articles and comments). Access: MEM'
     tags:
          - 'M02: Content Items'
          - 'M05: Members'
     parameters:
          - in: path
            name: username
            schema:
              type: string
            description: 'Member username'
            required: true
          - in: query
            name: type
            schema:
              type: string
            description: 'Content type (articles or comments or Both)'
          - in: query
            name: page
            schema:
              type: integer
            description: 'Page number'
            required: true
     responses:
          '200':
            description: 'Successfully retrieved member content items.'
            content:
              application/json:
                schema:
                  type: array
                  items:
                    oneOf:
                      - $ref: '#/components/schemas/SearchArticle'
                      - $ref: '#/components/schemas/SearchComment'
          '400':
            description: 'Bad Request. Invalid form data.'
          '403':
            description: 'Forbidden. User is not allowed to view this page.'
          '404':
            description: 'Not Found. User does not exist.'

 /api/tag/{name}/follow:
  post:
     operationId: R115
     summary: 'R115: Follow tag action'
     description: 'Processes the follow tag form submission. Access: OWN'
     tags:
          - 'M03: Votes and Tags'
     parameters:
        - in: path
          name: name
          schema:
            type: string
          description: 'Tag to follow'
          required: true
     responses:
        '302':
          description: 'Redirect after processing the follow tag request.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Tag followed successfully. Redirect to tag page.'
                  value: '/tag/{name}'
                302Failure:
                  description: 'Tag not followed. Redirect to tag page.'
                  value: '/tag/{name}'
        '403':
          description: 'Forbidden. User is not allowed to view this page.'
        '404':
          description: 'Not Found. Tag does not exist.'
  delete:
     operationId: R116
     summary: 'R116: Unfollow tag action'
     description: 'Processes the unfollow tag form submission. Access: OWN'
     tags:
            - 'M03: Votes and Tags'
     parameters:
          - in: path
            name: name
            schema:
              type: string
            description: 'Tag to unfollow'
            required: true
     responses:
          '200':
            description: 'Tag unfollowed successfully.'
          '403':
            description: 'Forbidden. User is not allowed to view this page.'
          '404':
            description: 'Not Found. Tag does not exist.'

 /:
  get:
    operationId: R117
    summary: 'R117: Redirects to home page'
    description: 'Shows the home page. Access: PUB'
    tags:
      - 'M02: Content Items'
      - 'M03: Votes and Tags'
    responses:
      '302':
        description: 'Redirect to home page.'
        headers:
          Location:
            schema:
              type: string
            examples:
              302:
                description: 'Redirect to home page.'
                value: '/home'
 
 /home:
  get:
     operationId: R118
     summary: 'R118: Shows the home page'
     description: 'Shows the home page. Access: PUB'
     tags:
        - 'M02: Content Items'
        - 'M03: Votes and Tags'
     responses:
        '200':
          description: 'Success. Display Home Page UI (UI01)'

 /api/feed:
  get:
     operationId: R119
     summary: 'R119: Retrieve feed items (Top or Latest)'
     description: 'Retrieve feed items (Top or Latest). Access: PUB'
     tags:
          - 'M02: Content Items'
          - 'M03: Votes and Tags'
     parameters:
          - in: query
            name: type
            schema:
              type: string
            description: 'Feed type (Top or Latest)'
            required: true
          - in: query
            name: queryType
            schema:
              type: string
            description: 'Query type (Articles and Comments, Articles or Comments)'
            required: true
          - in: query
            name: page
            schema:
              type: integer
            description: 'Page number'
            required: true
     responses:
          '200':
            description: 'Successfully retrieved feed items.'
            content:
              application/json:
                schema:
                  type: array
                  items:
                    oneOf:
                      - $ref: '#/components/schemas/SearchArticle'
                      - $ref: '#/components/schemas/SearchComment'
          '400':
            description: 'Bad Request. Invalid form data.'
          '403':
            description: 'Forbidden. User is not allowed to do this operation.'

 /api/feed/{username}:
  get:
     operationId: R120
     summary: 'R120: Retrieve member feed items'
     description: 'Retrieve member feed items. Access: OWN'
     tags:
          - 'M02: Content Items'
          - 'M03: Votes and Tags'
          - 'M05: Members'
     parameters:
          - in: path
            name: username
            schema:
              type: string
            description: 'Member username'
            required: true
          - in: query
            name: contentType
            schema:
              type: string
            description: 'Content type (Articles and Comments, Articles or Comments)'
          - in: query
            name: page
            schema:
              type: integer
            description: 'Page number'
            required: true
     responses:
        '200':
          description: 'Successfully retrieved member feed items.'
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/SearchArticle'
                    - $ref: '#/components/schemas/SearchComment'
        '400':
          description: 'Bad Request. Invalid form data.'
        '403':
          description: 'Forbidden. User is not allowed to view this page.'
        '404':
          description: 'Not Found. User does not exist.'

 /articles/create:
  get:
     operationId: R121
     summary: 'R121: Show article creation form'
     description: 'Show article creation form. Access: MEM'
     tags:
        - 'M02: Content Items'
     responses:
        '200':
          description: 'Success. Display Article Creation Form UI (UI13)'
        '403':
          description: 'Forbidden. User is not allowed to view this page.'
  post:
     operationId: R122
     summary: 'R122: Create article action'
     description: 'Processes the article creation form submission. Access: MEM'
     tags:
          - 'M02: Content Items'
     requestBody:
          required: true
          content:
            application/x-www-form-urlencoded:
              schema:
                type: object
                properties:
                  title:
                    type: string
                  body:
                    type: string
                  topic:
                    type: string
                  tags:
                    type: array
                    items:
                      type: string
                  images:
                    type: array
                    items:
                      type: string
                    format: binary
                required:
                  - title
                  - body
                  - topic
                  - tags
                  - images
     responses:
          '302':
            description: 'Redirect after processing the new article information.'
            headers:
              Location:
                schema:
                  type: string
                examples:
                  302Success:
                    description: 'Article created successfully. Redirect to article page.'
                    value: '/articles/{id}'
                  302Failure:
                    description: 'Article not created. Redirect to article creation form.'
                    value: '/articles/create'
          '400':
            description: 'Bad Request. Invalid form data.'
          '403':
            description: 'Forbidden. User is not allowed to view this page.'

 /articles/{id}:
  get:
     operationId: R123
     summary: 'R123: Shows article'
     description: 'Shows article. Access: PUB'
     tags:
          - 'M02: Content Items'
          - 'M03: Votes and Tags'
          - 'M04: Topics'
     parameters:
          - in: path
            name: id
            schema:
              type: integer
            description: 'Article id'
            required: true
     responses:
          '200':
            description: 'Success. Display Article / News Page UI (UI12)'
          '404':
            description: 'Not Found. Article page does not exist.'
  delete:
     operationId: R124
     summary: 'R124: Delete article action'
     description: 'Processes the delete article form submission. Access: OWN, ADM'
     tags:
          - 'M02: Content Items'
          - 'M08: Member Administration and Static Pages'
     parameters:
          - in: path
            name: id
            schema:
              type: integer
            description: 'Article id'
            required: true
     responses:
          '302':
            description: 'Redirect after processing the delete article information.'
            headers:
              Location:
                schema:
                  type: string
                examples:
                  302Success:
                    description: 'Article deleted successfully. Redirect to home page.'
                    value: '/home'
                  302Failure:
                    description: 'Article not deleted. Redirect to article page.'
                    value: '/articles/{id}'
          '403':
            description: 'Forbidden. User is not allowed to view this page.'
          '404':
            description: 'Not Found. Article does not exist.'
  patch:
     operationId: R125
     summary: 'R125: Edit article action'
     description: 'Processes the article edit form submission. Access: OWN, ADM'
     tags:
          - 'M02: Content Items'
          - 'M08: Member Administration and Static Pages'
     parameters:
          - in: path
            name: id
            schema:
              type: integer
            description: 'Article id'
            required: true
     requestBody:
          required: true
          content:
            application/x-www-form-urlencoded:
              schema:
                type: object
                properties:
                  title:
                    type: string
                  body:
                    type: string
                  topic:
                    type: string
                  tags:
                    type: array
                    items:
                      type: string
                  images:
                    type: array
                    items:
                      type: string
                    format: binary
                required:
                  - title
                  - body
                  - topic
                  - tags
                  - images
     responses:
          '302':
            description: 'Redirect after processing the edit article information.'
            headers:
              Location:
                schema:
                  type: string
                examples:
                  302Success:
                    description: 'Article edited successfully. Redirect to article page.'
                    value: '/articles/{id}'
                  302Failure:
                    description: 'Article not edited. Redirect to article edit form.'
                    value: '/articles/{id}/edit'
          '400':
            description: 'Bad Request. Invalid form data.'
          '403':
            description: 'Forbidden. User is not allowed to view this page.'
          '404':
            description: 'Not Found. Article does not exist.'

 /articles/{id}/edit:
  get:
     operationId: R126
     summary: 'R126: Show article edit form'
     description: 'Show article edit form. Access: OWN, ADM'
     tags:
          - 'M02: Content Items'
          - 'M08: Member Administration and Static Pages'
     parameters:
          - in: path
            name: id
            schema:
              type: integer
            description: 'Article id'
            required: true
     responses:
          '200':
            description: 'Success. Display Article / News Edit Form UI (UI15)'
          '403':
            description: 'Forbidden. User is not allowed to view this page.'
          '404':
            description: 'Not Found. Article does not exist.'

 /articles/{id}/comments:
  get:
     operationId: R127
     summary: 'R127: Retrieve article article comments'
     description: 'Retrieve article article comments. Access: PUB'
     tags:
          - 'M02: Content Items'
     parameters:
          - in: path
            name: id
            schema:
              type: integer
            description: 'Article id'
            required: true
          - in: query
            name: page
            schema:
              type: integer
            description: 'Page number'
            required: true
     responses:
          '200':
            description: 'Successfully retrieved article comments.'
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Comment'
          '404':
            description: 'Not Found. Article does not exist.'

 /tag/{name}:
  get:
     operationId: R128
     summary: 'R128: Shows tag page'
     description: 'Shows tag page. Access: PUB'
     tags:
          - 'M03: Votes and Tags'
     parameters:
          - in: path
            name: name
            schema:
              type: string
            description: 'Tag name'
            required: true
     responses:
          '200':
            description: 'Success. Display Tag Page UI (UI11)'
          '404':
            description: 'Not Found. Tag does not exist.'
  delete:
     operationId: R129
     summary: 'R129: Delete tag action'
     description: 'Processes the delete tag form submission. Access: ADM'
     tags:
          - 'M03: Votes and Tags'
          - 'M08: Member Administration and Static Pages'
     parameters:
          - in: path
            name: name
            schema:
              type: string
            description: 'Tag name'
            required: true
     responses:
          '302':
            description: 'Redirect after processing the delete tag information.'
            headers:
              Location:
                schema:
                  type: string
                examples:
                  302Success:
                    description: 'Tag deleted successfully. Redirect to home page.'
                    value: '/home'
                  302Failure:
                    description: 'Tag not deleted. Redirect to tag page.'
                    value: '/tag/{name}'
          '403':
            description: 'Forbidden. User is not allowed to view this page.'
          '404':
            description: 'Not Found. Tag does not exist.'

 /api/articles/{id}/comment:
  post:
     operationId: R130
     summary: 'R130: Create comment action'
     description: 'Processes the create comment form submission. Access: MEM'
     tags:
          - 'M02: Content Items'
          - 'M05: Members'
     parameters:
          - in: path
            name: id
            schema:
              type: integer
            description: 'Article id'
            required: true
     requestBody:
          required: true
          content:
            application/x-www-form-urlencoded:
              schema:
                type: object
                properties:
                  body:
                    type: string
                required:
                  - body
     responses:
          '302':
            description: 'Redirect after processing the create comment information.'
            headers:
              Location:
                schema:
                  type: string
                examples:
                  302Success:
                    description: 'Comment created successfully. Redirect to article page.'
                    value: '/articles/{id}'
                  302Failure:
                    description: 'Comment not created. Redirect to article page.'
                    value: '/articles/{id}'
          '400':
            description: 'Bad Request. Invalid form data.'
          '403':
            description: 'Forbidden. User is not allowed to view this page.'
          '404':
            description: 'Not Found. Article does not exist.'

 /api/articles/{articleID}/comment/{commentID}:
  patch:
     operationId: R131
     summary: 'R131: Edit comment action'
     description: 'Processes the edit comment form submission. Access: OWN, ADM'
     tags:
            - 'M02: Content Items'
            - 'M08: Member Administration and Static Pages'
     parameters:
            - in: path
              name: articleID
              schema:
                type: integer
              description: 'Article id'
              required: true
            - in: path
              name: commentID
              schema:
                type: integer
              description: 'Comment id'
              required: true
     requestBody:
            required: true
            content:
              application/x-www-form-urlencoded:
                schema:
                  type: object
                  properties:
                    body:
                      type: string
                  required:
                    - body
     responses:
            '200':
              description: 'Comment edited successfully.'
            '400':
              description: 'Bad Request. Invalid form data.'
            '403':
              description: 'Forbidden. User is not allowed to view this page.'
            '404':
              description: 'Not Found. Article or comment does not exist.'
  delete:
     operationId: R130
     summary: 'R130: Delete comment action'
     description: 'Processes the delete comment form submission. Access: OWN, ADM'
     tags:
            - 'M02: Content Items'
            - 'M08: Member Administration and Static Pages'
     parameters:
            - in: path
              name: articleID
              schema:
                type: integer
              description: 'Article id'
              required: true
            - in: path
              name: commentID
              schema:
                type: integer
              description: 'Comment id'
              required: true
     responses:
            '302':
              description: 'Redirect after processing the delete comment information.'
              headers:
                Location:
                  schema:
                    type: string
                  examples:
                    302Success:
                      description: 'Comment deleted successfully. Redirect to article page.'
                      value: '/articles/{articleID}'
                    302Failure:
                      description: 'Comment not deleted. Redirect to article page.'
                      value: '/articles/{articleID}'
            '403':
              description: 'Forbidden. User is not allowed to view this page.'
            '404':
              description: 'Not Found. Article or comment does not exist.'

 /api/articles/{articleID}/comment/{commentID}/reply:
  post:
     operationId: R132
     summary: 'R132: Create reply action'
     description: 'Processes the create reply form submission. Access: MEM'
     tags:
            - 'M02: Content Items'
     parameters:
            - in: path
              name: articleID
              schema:
                type: integer
              description: 'Article id'
              required: true
            - in: path
              name: commentID
              schema:
                type: integer
              description: 'Comment id'
              required: true
     requestBody:
            required: true
            content:
              application/x-www-form-urlencoded:
                schema:
                  type: object
                  properties:
                    body:
                      type: string
                  required:
                    - body
     responses:
            '302':
              description: 'Redirect after processing the create reply information.'
              headers:
                Location:
                  schema:
                    type: string
                  examples:
                    302Success:
                      description: 'Reply created successfully. Redirect to article page.'
                      value: '/articles/{articleID}'
                    302Failure:
                      description: 'Reply not created. Redirect to article page.'
                      value: '/articles/{articleID}'
            '400':
              description: 'Bad Request. Invalid form data.'
            '403':
              description: 'Forbidden. User is not allowed to view this page.'
            '404':
              description: 'Not Found. Article or comment does not exist.'

 /search:
  get:
      operationId: R133
      summary: 'R133: Shows search results page'
      description: 'Shows search results page. Access: PUB'
      tags:
            - 'M07: Search'
      parameters:
            - in: query
              name: query
              schema:
                type: string
              description: 'Search query'
            - in: query
              name: type
              schema:
                type: string
              description: 'Search type (Article or Comments or Tags or Members)'
            - in: query
              name: exactMatch
              schema:
                type: boolean
              description: 'Exact match'
      responses:
            '200':
              description: 'Success. Display Search Results Page UI (UI16)'

 /api/search:
  get:
     operationId: R134
     summary: 'R134: Search action. This is used to search for article, comments, tags and members'
     description: 'Search action. This is used to search for article, comments, tags and members. Access: PUB'
     tags:
            - 'M07: Search'
     parameters:
            - in: query
              name: query
              schema:
                type: string
              description: 'Search query'
              required: true
            - in: query
              name: type
              schema:
                type: string
                default: articles_comments
              description: 'Search type (Article or Comments or Tags or Members)'
            - in: query
              name: page
              schema:
                type: integer
                default: 1
              description: 'Page number'
            - in: query
              name: exactMatch
              schema:
                type: boolean
              description: 'Exact match'
     responses:
            '200':
              description: 'Successfully retrieved search results.'
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/SearchArticle'
                        - $ref: '#/components/schemas/SearchComment'
                        - $ref: '#/components/schemas/SearchTag'
                        - $ref: '#/components/schemas/SearchMember'
 /administration:
  get:
     operationId: R135
     summary: 'R135: Shows administration page'
     description: 'Shows administration page. Access: ADM'
     tags:
            - 'M08: Member Administration and Static Pages'
     responses:
            '200':
              description: 'Success. Display Administration Page UI'
            '403':
              description: 'Forbidden. User is not allowed to view this page.'
 
 /administration/create_member:
  get:
     operationId: R136
     summary: 'R136: Shows create member form'
     description: 'Shows create member form. Access: ADM'
     tags:
            - 'M08: Member Administration and Static Pages'
     responses:
            '200':
              description: 'Success. Display Create Member Form UI'
            '403':
              description: 'Forbidden. User is not allowed to view this page.'
  post:
     operationId: R137
     summary: 'R137: Create member action'
     description: 'Processes the create member form submission. Access: ADM'
     tags:
            - 'M08: Member Administration and Static Pages'
     requestBody:
            required: true
            content:
              application/x-www-form-urlencoded:
                schema:
                  type: object
                  properties:
                    firstName:
                      type: string
                    lastName:
                      type: string
                    username:
                      type: string
                    email:
                      type: string
                    password:
                      type: string
                    confirmPassword:
                      type: string
                  required:
                    - firstName
                    - lastName
                    - username
                    - email
                    - password
                    - confirmPassword
     responses:
            '302':
              description: 'Redirect after processing the new member information.'
              headers:
                Location:
                  schema:
                    type: string
                  examples:
                    302Success:
                      description: 'Member created successfully. Redirect to member profile.'
                      value: '/members/{username}'
                    302Failure:
                      description: 'Member not created. Redirect to create member form.'
                      value: '/administration/create_member'

components:
  schemas:
    SearchMember:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        picture:
          type: string
        email:
          type: string
        academyScore:
          type: integer
    SearchArticle:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        body:
          type: string
        date:
          type: string
          format: date-time
        topic:
          type: string
        tags:
          type: array
          items:
            type: string
        academyScore:
          type: integer
        author:
          $ref: '#/components/schemas/Author'
    SearchComment:
      type: object
      properties:
        id:
          type: integer
        body:
          type: string
        date:
          type: string
          format: date-time
        isReply:
          type: boolean
        replyTo:
          type: integer
          nullable: true
        academyScore:
          type: integer
        author:
          $ref: '#/components/schemas/Author'
    SearchTag:
      type: object
      properties:
        name:
          type: string
    Author:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
    Article:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        body:
          type: string
        date:
          type: string
          format: date-time
        topic:
          type: string
        tags:
          type: array
          items:
            type: string
        academyScore:
          type: integer
    Comment:
      type: object
      properties:
        id:
          type: integer
        body:
          type: string
        date:
          type: string
          format: date-time
        isReply:
          type: boolean
        replyTo:
          type: integer
          nullable: true
        academyScore:
          type: integer
        author:
          $ref: '#/components/schemas/Author'
        replies:
          type: array
          items:
            $ref: '#/components/schemas/Comment'